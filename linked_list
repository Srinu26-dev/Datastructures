#include<stdio.h>
#include<stdlib.h>
struct node 
{
 int info;
struct node *link;
}

struct node *createList(struct node *start);
void displayList(struct node *start);
void countnodes(struct node *start);
void search(struct node *start);
struct node *insertInBeginning(struct node *start,int data);
void insertAtEnd(struct node *start,int data);
void insertAfter(sruct node *start , int data ,int x)
struct node *insertBefore(struct node *start , int data , int x);
struct node *insertAtPosition(struct node *start,int data ,int k);
struct node *deletenode(struct node *start);
struct node *reverseList(struct node *start);
int main()
{
  struct node *start =NULL ;
  int choice ,data,x,k;
start =createList(start);
while(1)
{
 printf("\n");
 printf("1.Display list\n");
 printf("2.count the number of nodes \n");
 printf("3.search for an element\n);
printf("4.Add to empty list /Add at beginning\n");
printf("5.Add a node at end of the list\n");
printf("6.Add a node after a specified node \n");
printf("7.Add a node before a specified node \n");
printf("8.Add a node at given position\n");
printf("9.Delete a node \n");
printf("10.Reverse the list\n");
printf("11.Quit\n");

printf("Enter your choice: ");
scanf("%d",&choice);

if(choice ==11)
  break;
switch(choice)
{
   case 1:
      displayList(start);
      break;
   case 2:
     countNodes(start);
    break;
  case 3:
      printf("enter the element to be searched : ");
      scanf("%d" , &data);
      search(start,data);
      break;
  case 4:
      printf("Enter the element to be inserted :");
      scanf("%d",&data)
      start = insertAtBeginning(start ,data);
      break;
  case 5:
      printf("Enter the element to be inserted :");
      scanf("%d",&data);
      insertAtEnd(start ,data);
      break;
  case 6:
     printf("Enter the element to be inserted :");
     scanf("%d",&data);
     printf("Enter the element after which to insert :");
     scanf("%d",&x);
     insertAfter(start,data,x);
     break;
  case 7:
     printf("Enter the element to be inserted :");
     scanf("%d",&data);
     printf("Enter the element before which to insert :");
    scanf("%d",&x);
    start =insertBefore(start ,data ,x);
    break;
  case 8:
    printf("Enter the element to be inserted :");
    scanf("%d",&data);
    printf("Enter the position at which to insert :");
   scanf("%d",&k);
   start =insertAtPosition(start ,data,k);
   break;
  case 9:
   printf("Enter the element to be deleted :");
   scanf("%d",&data);
   start =deleteNode(start ,data);
   break;
  case 10 :
   start =reverseList(start);
  break;
  default :
   printf("wrong choice\n");
}
}
}

void DisplayList(struct node *start)
{
   struct node *p;
   if(start==NULL)
   {
       printf("List is empty\n");
       return;
    }
    printf("List is : ");

   p=start;
   while(p!=NULL)
   {
     printf("%d" ,p->info);
     p= p->link;
   }
   printf("\n");
}/*End of DisplayList */

void  countnodes(struct node *start)
{
   int n=0;
   struct node *p;
   p=start;
   while(p!=NULL)
   {
       n++;
       p=p->link;
   }
   printf("Number of nodes in List =%d\n",n);
}/*End of countNodes */

void search(struct node *start,int x)
{
   int position=1;
   struct node *p;
   p=start;
   while(p!=NULL)
   {
      if(p->info ==x)
      {
           break;
      }
      position ++;
      p = p->link;
  }
  if(p==NULL)
  {
     printf( %d not found in list\n",x);
  }
  else
  {
      printf("%d is at position %d\n",x,position);
  }

}/*End of search */
struct node *insertInBeginning(struct node *start,int data)
{
   struct node *temp;
   temp=(struct node *)malloc(sizeof(struct node));
   temp->info = data;
   
   temp->link =start;
   start = temp;
   
   return start;
}
void insertAtEnd(struct node *start , int data)
{
  struct node *p , *temp;
  temp = (struct node *)malloc(sizeof(struct node));
  temp->info =data;
 
  p=start;
  while(p->link!=NULL)
  {
      p= p->link;
  }
  
  p->link = temp;
  temp->link = NULL;
}

struct node *createList(struct node *start)
{
  int i,n, data;
  printf("Enter the number of nodes : ");
  scanf("%d",&n);

  if(n==0)
      return start;
  printf("Enter the first element to be inserted : ");
  scanf("%d", &data);
  start = insertAtBeginning(start ,data);

  for(i=2 ; i<=n ;i++)
  {
     printf("Enter the next element to be inserted : ");
     scanf("%d" ,&data);
     insertAtEnd(start ,data);
  }

  return start ;
}
   

